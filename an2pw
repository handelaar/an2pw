#!/usr/bin/env php
<?php

/**
 * an2pw - Convert Akoma Ntoso XML to PublicWhip XML
 * 
 * WARNING: HIGHLY-EXPERIMENTAL ALPHA-AS-FUCK TEST CODE
 * WARNING: NOT FOR USE
 * 
 * @version  0.1.0
 * @license  https://opensource.org/licenses/GPL-2.0 GPL 2
 * @author   John Handelaar <john@handelaar.org>
 */ 


 // Test script; to be removed before release
#$akomantoso = new ConvertAkomantosoToPublicwhip('data/dail20181127.xml');
#$akomantoso = new ConvertAkomantosoToPublicwhip('data/seanad20181127.xml');
$akomantoso = new ConvertAkomantosoToPublicwhip('data/wrans20181211.xml');
$akomantoso->setChamber('seanad');
$akomantoso->setSpeakers(array('eID' => 'publicwhip_id'));
$akomantoso->toPublicWhip();
$akomantoso->write();
die();

class ConvertAkomantosoToPublicwhip {

    public function __construct($filename) {
        
        # TODO: Make this actually do something later
        $this->debug = FALSE;
        
        # Load example file 
        # TODO: replace this with specified config options
        $this->akoma = simplexml_load_file($filename);


        # Filename assumed to contain date in format YYYYmmdd; this regex just removes non-numeric chars from filename
        # TODO: move this to config 
        $this->date = DateTime::createFromFormat('Ymd H:i:s', preg_replace("/[^0-9]/", "", $filename) . " 00:00:00");
        

        # TODO: move these to config
        $this->namespace = 'com.kildarestreet'; # use eg 'uk.org.publicwhip' if you're not in Ireland
        $this->revision = 'a';


        # Start item counter
        $this->counter = 0;


        # Used later to tag answers to questions
        $this->lastwasquestion = FALSE;


        # Create bucket for PublicWhip XML output
        $this->output = array();


        # SimpleXML's xpath support doesn't work with Akoma Ntoso files 
        # unless the namespace is registered and then used in xpath calls
        # 
        # TODO: wrap this around a test for network connectivity because
        # everything will probably die on its arse if the referenced doc is
        # not available to this class

        $this->akoma->registerXPathNamespace('ns', "http://docs.oasis-open.org/legaldocml/ns/akn/3.0/CSD13");

    }


    public function toPublicWhip() {
        
        // Loop through each debateSection in Akoma Ntoso simplexml object

        foreach($this->akoma->xpath('//ns:debate/ns:debateBody/ns:debateSection') as $section) {

            // Generate publicwhip <majorheading>

            $this->counter ++;
            if (isset($section->heading)) {
                $domnode = dom_import_simplexml($section->heading);
                #echo " --  line " . $domnode->getLineNo() . "\n";
                $row = $this->heading("major",$section->heading);
                $this->output[] .= $row;
            }

            // Loop through child objects and process by type; 
            
            foreach($section->children() as $child) {

                switch($child->getName()) {

                    case "heading":

                        // ignore heading because we just did that above
                        break;
                    
                    case "summary":

                        $this->counter++;
                        $this->output[] .= $this->speechProcedural($child);
                        break;                    
                    
                    case "speech":

                        $this->counter++;
                        $this->output[] .= $this->speech($child);
                        break;                    

                    // If there is a nested debateSection, do that loop inside this loop
                    
                    case "debateSection":

            			$this->counter++;
                        if(!$child->attributes()->name == "division") {
                            $row = $this->heading("minor",$child->heading);
                            $this->output[] .=  $row;
    
                        }

                        foreach($child->children() as $grandchild) {

                            switch($grandchild->getName()) {
                                case "heading":
                                    break;

                                case "summary":
                                    $this->counter++;
                                    $this->output[] .= $this->speechProcedural($grandchild);
                                    break;                    
            
                                case "speech":
                                    $this->counter++;
                                    $this->output[] .= $this->speech($grandchild);
                                    break;

                                case "question":
                                    $this->counter++;
                                    $this->output[] .= $this->question($grandchild);
                                    break;

                                case "debateSection":   # this is probably a division
                                    $this->counter++;
                                    #$this->output[] .= $this->division($grandchild);
                                    $this->output[] .= "division";
                                    print_r($grandchild);
                                    break;

                                default:
                                    $this->counter++;
                                    echo "    " . $this->counter . "  FATAL: unable to identify grandchild of type '" . $grandchild->getName() . "'";
                                    $domnode = dom_import_simplexml($grandchild);
                                    echo " --  line " . $domnode->getLineNo() . "\n";
                                    unset($domnode);
                                    die();
                                    break;
                                }
                            }
                        
                        break;


                    // Unrecognised child types cause a crash so that we can't ignore
                    // that this processor is incomplete

                    default:
                        $this->counter++;
                        echo "    " . $this->counter . "  FATAL: unable to identify child of type '" . $child->getName() . "'";
                        $domnode = dom_import_simplexml($child);
                        echo " --  line " . $domnode->getLineNo() . "\n";
                        unset($domnode);
                        die();
                        break;
                }

            }

        }
            
    }

    private function speechProcedural($object) {

        $domnode = dom_import_simplexml($object);

        $speech =  "    <speech " .
            'id="' . $this->namespace . '/' . $this->chamber . '/' . $this->date->format('Y-m-d') . $this->revision . '.' . 
            $this->counter . '" ' . 'nospeaker="true" ';

        # Don't add timestamp if we haven't yet encountered an object with a timestamp
        if($this->date->format('H:i:s') !== "00:00:00") {
            $speech .= 'time="' . $this->date->format('H:i:s') . '" '; 
        }

        $speech .= 'url="' . '"><p>' . trim($domnode->nodeValue) . "</p></speech>";
        
        return $speech;

    }


    private function question($object) {

        $this->lastwasquestion = TRUE;

        foreach($object as $content) {
            if(isset($content->attributes()->eId)) {
                $question = $content->asXML();

                # Because tag regexing doesn't work
                # 1. Wrap qnumday in <i> 
                $pieces = explode("<b>",$question);
                $pieces[0] = "<p><i>" . trim($pieces[0]) . "</i> ";

                # 2. Fish out name of questioner
                $qnameparts = explode("</b>", $pieces[1]);
                $qname = trim(str_replace(array("Deputy ", "Senator "),"",$qnameparts[0]));
                unset ($qnameparts);

                # 3. Normalise remainder of question
                $qcontentparts = explode("</b>",$pieces[2]);
                $pieces[1] = "To ask the ";
                $pieces[2] = implode("", $qcontentparts);
                $pieces[2] = str_replace("[","<b>[", $pieces[2]);
                $pieces[2] = str_replace("]","]</b>", $pieces[2]);
                unset ($qcontentparts);
                $question = implode($pieces);
            }
        }

        $speech = "    <ques " .
            'id="' . $this->namespace . '/' . $this->chamber . '/' . $this->date->format('Y-m-d') . $this->revision . '.' . 
            $this->counter . '.q' . '" ' . 'speakerid="' . str_replace('#','',trim($object->attributes()->by)) . '" ' .
            'speakername="' .  $qname  .  '" ' ;  

        # Don't add timestamp if we haven't yet encountered an object with a timestamp
        if($this->date->format('H:i:s') !== "00:00:00") {
            $speech .= 'time="' . $this->date->format('H:i:s') . '" '; 
        }

        $speech .= 'url="' . '">';
        
        $speech .= $question;

        $speech .= "</ques>";

        return $speech;


    }

    private function division($object) {
        #print_r($object);
        /*

        <speech id="com.kildarestreet/seanad/2018-11-27a.110/1" nospeaker="true" time="14:30:00" url="http://debatesarchive.oireachtas.ie/debates%20authoring/debateswebpack.nsf/takes/seanad2018112700002#RR00100"><p>Question put:</p><p>The Seanad divided: Tá, 13; Níl, 7.</p><br/><br/><p>Tellers: Tá, Senators Kieran O'Donnell and John O'Mahony; Níl, Senators Rose Conway-Walsh and Fintan Warfield.</p></speech>
            <division id="com.kildarestreet/seanad/2018-11-27a.110/2" nospeaker="true" divdate="2018-11-27" time="14:30:00" url="http://debatesarchive.oireachtas.ie/debates%20authoring/debateswebpack.nsf/takes/seanad2018112700002#RR00100">
                <divisioncount ayes="13" noes="7" abstain="0" />
                    <mplist vote="aye">
                        <mpname id="com.kildarestreet/member/1379" vote="aye">Victor Boyhan</mpname>
                        <mpname id="com.kildarestreet/member/1409" vote="aye">Colm Burke</mpname>
                        <mpname id="com.kildarestreet/member/1423" vote="aye">Ray Butler</mpname>
                        <mpname id="com.kildarestreet/member/1391" vote="aye">Jerry Buttimer</mpname>
                        <mpname id="com.kildarestreet/member/1424" vote="aye">Frank Feighan</mpname>
                        <mpname id="com.kildarestreet/member/1429" vote="aye">Billy Lawless</mpname>
                        <mpname id="com.kildarestreet/member/1438" vote="aye">Anthony Lawlor</mpname>
                        <mpname id="com.kildarestreet/member/1425" vote="aye">Michelle Mulherin</mpname>
                        <mpname id="com.kildarestreet/member/1374" vote="aye">Kieran O'Donnell</mpname>
                        <mpname id="com.kildarestreet/member/1426" vote="aye">John O'Mahony</mpname>
                        <mpname id="com.kildarestreet/member/1431" vote="aye">P&aacute;draig &Oacute; C&eacute;idigh</mpname>
                        <mpname id="com.kildarestreet/member/1421" vote="aye">James Reilly</mpname>
                        <mpname id="com.kildarestreet/member/1399" vote="aye">Neale Richmond</mpname>
                    </mplist>
                    <mplist vote="no">
                        <mpname id="com.kildarestreet/member/1408" vote="no">Frances Black</mpname>
                        <mpname id="com.kildarestreet/member/1378" vote="no">Rose Conway Walsh</mpname>
                        <mpname id="com.kildarestreet/member/1405" vote="no">Alice Mary Higgins</mpname>
                        <mpname id="com.kildarestreet/member/1417" vote="no">Kevin Humphreys</mpname>
                        <mpname id="com.kildarestreet/member/1400" vote="no">P&aacute;draig MacLochlainn</mpname>
                        <mpname id="com.kildarestreet/member/1413" vote="no">Niall &Oacute; Donnghaile</mpname>
                        <mpname id="com.kildarestreet/member/1372" vote="no">Fintan Warfield</mpname>
                    </mplist>
                    <mplist vote="abstain">
                    </mplist>
            </division>
        <speech id="com.kildarestreet/seanad/2018-11-27a.110/3" nospeaker="true" time="14:30:00" url="http://debatesarchive.oireachtas.ie/debates%20authoring/debateswebpack.nsf/takes/seanad2018112700002#RR00100"><p>Question declared carried.</p></speech>
   
        */

    }


    private function speech($object) {

        $this->answersuffix = "";

        if($this->lastwasquestion) {
            $this->answersuffix = ".r";
            $this->lastwasquestion = FALSE;
        }

        $speech = "    <speech " .
            'id="' . $this->namespace . '/' . $this->chamber . '/' . $this->date->format('Y-m-d') . $this->revision . '.' . 
            $this->counter . $this->answersuffix . '" ' . 'speakerid="' . str_replace('#','',trim($object->attributes()->by)) . '" ' .
            'speakername="' .  trim($object->from)  .  '" ' ;  

        # Don't add timestamp if we haven't yet encountered an object with a timestamp
        if($this->date->format('H:i:s') !== "00:00:00") {
            $speech .= 'time="' . $this->date->format('H:i:s') . '" '; 
        }

        $speech .= 'url="' . '">';
        
        foreach($object as $content) {
            if(isset($content->attributes()->eId)) {
                $speech .= $content->asXML();
            } else {
                print_r($content->attributes());
            }
            
        }
        $speech .= "</speech>";

        return $speech;

    }


    private function heading($type,$object) {
        
        // Get time for publicwhip format
        // "2018-12-12T10:30:00+00:00" -> "10:30:00"
        
        if($object->recordedTime) {
            $objAttrs = $object->recordedTime->attributes();
            $this->date = DateTime::createFromFormat('Y-m-d\TH:i:sP', (string) $objAttrs["time"], new DateTimeZone('Europe/Dublin'));
            $date = date_format($this->date,'Y-m-d');
            $time = date_format($this->date,'H:i:s');    
        } else {
            $date = NULL;
            $time = NULL;
        }

        $output = "<$type-heading " .
            'id="' . $this->namespace . '/' . $this->chamber . '/' . $date . $this->revision . '.' . $this->counter . '" ' .
            'nospeaker="true" ' .
            'time="' . $time . '" ' .
            'url="' . '">' .
            trim($object) .
            "</$type-heading>";
        
        return($output);
    
    }


    public function setChamber(string $chamber) {
        
        $this->chamber=$chamber;
        return;
    }


    public function setSpeakers(array $speakers) {
        
        # do things
        
        return;
    }

    public function write() {

    	echo implode("\n",$this->output);
    	echo "\n";

        # do things

        return;
    }

}
